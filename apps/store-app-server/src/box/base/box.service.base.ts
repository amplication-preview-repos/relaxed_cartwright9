/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Box as PrismaBox,
  Order as PrismaOrder,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class BoxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BoxCountArgs, "select">): Promise<number> {
    return this.prisma.box.count(args);
  }

  async boxes<T extends Prisma.BoxFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoxFindManyArgs>
  ): Promise<PrismaBox[]> {
    return this.prisma.box.findMany<Prisma.BoxFindManyArgs>(args);
  }
  async box<T extends Prisma.BoxFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoxFindUniqueArgs>
  ): Promise<PrismaBox | null> {
    return this.prisma.box.findUnique(args);
  }
  async createBox<T extends Prisma.BoxCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoxCreateArgs>
  ): Promise<PrismaBox> {
    return this.prisma.box.create<T>(args);
  }
  async updateBox<T extends Prisma.BoxUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoxUpdateArgs>
  ): Promise<PrismaBox> {
    return this.prisma.box.update<T>(args);
  }
  async deleteBox<T extends Prisma.BoxDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoxDeleteArgs>
  ): Promise<PrismaBox> {
    return this.prisma.box.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.box
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.box
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
